#
# Reusable workflow for validating Azure Infrastructure as Code
#

# For action details see:
# https://azure.github.io/PSRule.Rules.Azure/creating-your-pipeline/

name: Analysis

on:
  # Allow triggering of workflow as a reusable workflow.
  workflow_call:
    inputs:
      baseline:
        description: The baseline to use for analysis. By default use the latest rules.
        type: string
        required: true

jobs:
  psrule:
    name: PSRule
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Bicep
        run: |
          sudo curl -Lo bicep https://github.com/Azure/bicep/releases/download/v0.18.4/bicep-linux-x64
          ls -l
          sudo chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          ls -l /usr/local/bin/bicep

      # Build and analyze Azure resources using PSRule for Azure
      - name: Run PSRule for Azure
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: PSRule.Rules.Azure
          baseline: ${{ inputs.baseline }}
          outputFormat: Sarif
          outputPath: reports/ps-rule-results.sarif
        env:
          PSRULE_OUTPUT_OUTCOME: Problem

      - name: Upload analysis
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: Reports
          path: reports/*.sarif

      # Import results into GitHub Advanced Security
      - name: Upload results to security tab
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: reports/ps-rule-results.sarif

  devskim:
    name: DevSkim
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create reports
        run: mkdir reports

      - name: Run DevSkim
        uses: microsoft/DevSkim-Action@v1
        with:
          output-directory: reports

      - name: Upload analysis
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: Reports
          path: reports/*.sarif

      # Import results into GitHub Advanced Security
      - name: Upload results to security tab
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: reports/devskim-results.sarif
